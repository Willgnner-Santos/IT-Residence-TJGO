# Importa√ß√£o das bibliotecas necess√°rias
import streamlit as st  # Biblioteca para cria√ß√£o de interfaces web interativas
from transformers import AutoTokenizer, AutoModelForSequenceClassification  # Para carregar modelos pr√©-treinados da Hugging Face
import torch  # Biblioteca para computa√ß√£o com tensores e uso de modelos em PyTorch
import numpy as np  # Biblioteca para manipula√ß√£o de arrays (n√£o est√° sendo usada diretamente aqui, mas pode ser √∫til)

# === Carregamento do modelo e tokenizer ===

# Carrega o tokenizer do modelo fine-tunado LegalBERT para classifica√ß√£o de sequ√™ncia
tokenizer = AutoTokenizer.from_pretrained(
    r"C:\Users\Willgnner\Documents\TJ-GO\legal-bert-base-uncased\model_128tokens\checkpoint-10712"
)

# Carrega o modelo fine-tunado a partir do mesmo diret√≥rio
model = AutoModelForSequenceClassification.from_pretrained(
    r"C:\Users\Willgnner\Documents\TJ-GO\legal-bert-base-uncased\model_128tokens\checkpoint-10712"
)

# Dicion√°rios para mapear os √≠ndices das classes para seus respectivos r√≥tulos
id2label = {0: "TESE", 1: "FATO", 2: "RUIDO"}
label2id = {"TESE": 0, "FATO": 1, "RUIDO": 2}

# === Fun√ß√£o de predi√ß√£o dos par√°grafos ===
def predict_chunks(texto, max_len=512):
    # Divide o texto em par√°grafos e classifica cada um deles usando o modelo carregado.
    # Retorna uma lista de tuplas (par√°grafo, classe).
    
    # Divide o texto em par√°grafos, removendo espa√ßos em branco extras
    paragrafos = [p.strip() for p in texto.split("\n") if p.strip()]
    
    resultados = []

    # Classifica cada par√°grafo individualmente
    for p in paragrafos:
        # Tokeniza o par√°grafo (com truncamento e padding)
        inputs = tokenizer(p, return_tensors="pt", truncation=True, max_length=max_len, padding=True)

        # Desativa o c√°lculo de gradiente (mais r√°pido e eficiente para infer√™ncia)
        with torch.no_grad():
            outputs = model(**inputs)

        # Obt√©m os logits (pontua√ß√µes para cada classe) e seleciona a classe com maior valor
        logits = outputs.logits
        pred = torch.argmax(logits, dim=1).item()

        # Salva o par√°grafo e o r√≥tulo predito
        resultados.append((p, id2label[pred]))
    
    return resultados

# === Interface com Streamlit ===

# Configura√ß√µes da p√°gina do app
st.set_page_config(page_title="Classificador de Peti√ß√µes", layout="wide")

# T√≠tulo da aplica√ß√£o
st.title("üßæ Classificador de Peti√ß√µes Jur√≠dicas com LegalBERT")

# Instru√ß√µes para o usu√°rio
st.markdown("Cole o texto da peti√ß√£o abaixo. O modelo vai identificar automaticamente as partes como **FATO**, **TESE** ou **RU√çDO**.")

# Campo de entrada de texto
texto_peticao = st.text_area("Texto da peti√ß√£o", height=300, placeholder="Cole aqui o conte√∫do da peti√ß√£o...")

# Op√ß√£o para o usu√°rio escolher o modo de visualiza√ß√£o dos resultados
modo = st.radio("Modo de Visualiza√ß√£o:", ["Separar por Classe", "Agrupar Fatos e Teses (√∫teis)"])

# Bot√£o para iniciar a classifica√ß√£o
if st.button("Classificar"):

    # Verifica se o campo de texto est√° vazio
    if not texto_peticao.strip():
        st.warning("‚ö†Ô∏è Por favor, insira o texto da peti√ß√£o.")
    else:
        # Realiza a classifica√ß√£o dos par√°grafos
        resultados = predict_chunks(texto_peticao)

        # === Modo 1: Separar por Classe ===
        if modo == "Separar por Classe":
            st.subheader("üîç Resultados por Classe (Agrupados)")

            # Agrupa os par√°grafos classificados por categoria
            agrupados = {"FATO": [], "TESE": [], "RUIDO": []}
            for paragrafo, classe in resultados:
                agrupados[classe].append(paragrafo)

            # Exibe os par√°grafos de cada classe em caixas separadas
            for classe in ["FATO", "TESE", "RUIDO"]:
                st.markdown(f"### {classe}")
                texto_agrupado = "\n\n".join(agrupados[classe])
                st.text_area(f"{classe}", value=texto_agrupado, height=200 if classe == "RUIDO" else 300)

        # === Modo 2: Agrupar FATO e TESE ===
        else:
            # Separa os par√°grafos √∫teis (FATO ou TESE) dos ru√≠dos
            uteis = [p for p, c in resultados if c in ("FATO", "TESE")]
            ruidos = [p for p, c in resultados if c == "RUIDO"]

            # Exibe os par√°grafos √∫teis juntos
            st.subheader("üìå Conte√∫do Relevante (FATO + TESE)")
            texto_uteis = "\n\n".join(uteis)
            st.text_area("FATO + TESE", value=texto_uteis, height=400)

            # Exibe os par√°grafos classificados como ru√≠do
            st.subheader("üîá Ru√≠dos Detectados")
            texto_ruidos = "\n\n".join(ruidos)
            st.text_area("RUIDOS", value=texto_ruidos, height=200)
